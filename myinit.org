#+STARTUP: overview
* keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
  (global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)
  (global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC
* PATH
#+BEGIN_SRC emacs-lisp
  (setenv "anaconda3" "/home/okktee/anaconda3/bin/")
  (setenv "NVM_BIN" "/home/okktee/.nvm/versions/node/v12.16.1/bin")
  (setenv "yarn" "/home/okktee/.yarn/bin/")
  (setenv "PATH" (concat (getenv "PATH") ":" (getenv "NVM_BIN") ":" (getenv "anaconda3") ":" (getenv "yarn")))
  (setq exec-path (append exec-path '("/home/okktee/.nvm/versions/node/v12.16.1/bin")))
  (setq exec-path (append exec-path '("/home/okktee/anaconda3/bin/")))
  (setq exec-path (append exec-path '("/home/okktee/.yarn/bin/")))
#+END_SRC
* which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :defer 5
  :diminish
  :commands which-key-mode
  :config
  (which-key-mode))
#+END_SRC
* expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region)
  :config (setq expand-region-fast-keys-enabled nil))
#+END_SRC
* pyim
#+BEGIN_SRC emacs-lisp
(use-package posframe
    :ensure t)
(use-package pyim
  :ensure t
  :config
  ;;(use-package pyim-cangjie5dict
  ;;  :ensure t
  ;;  :config (pyim-cangjie5-enable))
  (use-package pyim-basedict
    :ensure nil
    :config (pyim-basedict-enable))
  ;(setq pyim-dicts '((:file "/home/lam/Documents/pyim-bigdict.pyim")))
  ;(setq pyim-default-scheme 'cangjie)
  (setq pyim-default-scheme 'xiaohe-shuangpin)
  (setq default-input-method "pyim")
  (setq pyim-page-tooltip 'posframe))
#+END_SRC
* neotree
#+BEGIN_SRC emacs-lisp
;(use-package neotree
;  :ensure t
;  :bind([f8] . neotree-toggle)
;  :config
;  (setq neo-autorefresh nil)
;  (setq neo-theme 'icons)
;  (setq-default neo-show-hidden-files t))
#+END_SRC
* UI
** all the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
** all-the-icons-ivy-rich
#+begin_src emacs-lisp
(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))
#+end_src
** all-the-icons-ibuffer
#+begin_src emacs-lisp
(use-package all-the-icons-ibuffer
  :ensure t
  :init (all-the-icons-ibuffer-mode 1))
#+end_src
** spaceline
#+BEGIN_SRC emacs-lisp
;;(use-package spaceline
;;  :ensure t
;;  :init(require 'spaceline)
;;  :config
;;  (setq spaceline-window-numbers-unicode t)
;;  (setq powerline-default-separator 'slant)
;;  (spaceline-emacs-theme))
#+END_SRC
** doom-themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+END_SRC
** doom-modeline
#+BEGIN_SRC emacs-lisp 
(use-package doom-modeline
  :ensure t
  :defer t
  :hook (after-init . doom-modeline-init))
#+END_SRC
** default-text-scale-mode
#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
  :ensure t
  :init
  (default-text-scale-mode))
#+END_SRC
** highlight-indent-guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode)
)
#+end_src
** etc
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
(setq-default cursor-type 'box)
(setq-default blink-cursor-blinks 0)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
#+END_SRC
* smartparents
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :init
  (global-highlight-parentheses-mode t)
  (smartparens-global-mode t)
  :config
  (defun my-fancy-newline ()
  (interactive)
  (let ((break-open-pair (or (and (looking-back "{") (looking-at "}"))
                             (and (looking-back "<") (looking-at ">"))
                             (and (looking-back "(") (looking-at ")"))
                             (and (looking-back "\\[") (looking-at "\\]")))))
    (newline)
    (when break-open-pair
      (save-excursion
        (newline)
        (indent-for-tab-command)))
    (indent-for-tab-command)))
  (global-set-key (kbd "RET") 'my-fancy-newline)
  :bind(
  ("C-M-a" . sp-beginning-of-sexp)
  ("C-M-e" . sp-end-of-sexp))
)
#+END_SRC
* highlight-parentheses
#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses
  :ensure t
  :config
  (setq hl-paren-background-colors '("#00bfff"))
  (setq hl-sexp-background-color '("#1c1f26"))
  (setq hl-paren-colors '("#000000" "#ffff00" "#ff4500" "#ff00ff"))
)
#+END_SRC
* web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :defer 5
  :config
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-enable-auto-pairing nil)
  (setq web-mode-enable-auto-indentation nil)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 4)
  (setq web-mode-script-padding 0)
  (setq web-mode-style-padding 0)
  (flycheck-add-mode  'javascript-eslint 'web-mode)
  ;(flycheck-add-mode  'html-tidy 'web-mode)
  :mode (("\\.vue\\'" . web-mode)
         ("\\.html\\'" . web-mode)
         ;;("\\.js\\'" . web-mode)
         ("\\.wxml\\'" . web-mode)
         ("\\.wxss\\'" . css-mode)
         ))
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :defer t
  :bind
  (;("M-x" . helm-M-x)
   ("C-x C-b" . helm-mini)
   ;("C-x C-f" . helm-find-files)
  )
  :config
  (setq helm-mode-fuzzy-match t)
  (setq helm-M-x-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-recentf-fuzzy-match t)
  (helm-mode 1))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  ;;(setq flycheck-check-syntax-automatically 'mode-enabled)
  (global-flycheck-mode))
#+END_SRC
* flycheck-inline
#+BEGIN_SRC emacs-lisp
;;(use-package flycheck-inline
;;  :ensure t
;;  :hook(flycheck-mode))
#+END_SRC
* multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :demand
  :bind (("C-<" . mc/mark-previous-like-this-word)
         ("C->" . mc/mark-next-like-this-word)
         ("C-c m c" . mc/edit-beginnings-of-lines)
         ("C-c m d" . mc/mark-all-dwim)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click))
  :config
  (setq mc/always-run-for-all 1)
  (add-to-list 'mc/cmds-to-run-once 'mc/toggle-cursor-at-point)
  (add-to-list 'mc/cmds-to-run-once 'multiple-cursors-mode))
#+END_SRC
* emmet-mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t
  :hook(web-mode sgml-mode rjsx-mode))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind("C-x g" . magit-status))
#+END_SRC
* rainbow-delimiters-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters-mode
  :hook(prog-mode-hook))
#+END_SRC
* solaire-mode
#+BEGIN_SRC emacs-lisp
(use-package solaire-mode
  :ensure t
  :hook(web-mode
        sgml-mode
        js-mode
        js2-mode
        javascript-mode
        ng2-ts-mode
        css-mode
        emacs-lisp-mode
        python-mode
        markdown-mode
        package-menu-mode
        org-mode
        php-mode))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-mode +1)
  (setq projectile-completion-system 'ivy))
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind
  ("C-s" . swiper)
  ("C-x b" . ivy-switch-buffer))
#+END_SRC
* ivy-rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :ensure t
  :config
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (ivy-rich-mode 1))
#+end_src
* rg
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure t
  :config
  (rg-enable-default-bindings))
#+END_SRC
* counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind
  ("M-x" . 'counsel-M-x)
  ("C-x C-f" . 'counsel-find-file)
  :config
  (setq ivy-use-virtual-buffers t))
#+END_SRC
* dumb-jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
  (setq dumb-jump-force-searcher 'rg)
  ;;(setq dumb-jump-selector 'helm)
  ;;(setq dumb-jump-selector 'ivy)
)
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-show-numbers t)
  (setq company-tooltip-limit 10)
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t)
  (setq company-dabbrev-downcase nil)
  ;; invert the navigation direction if the the completion popup-isearch-match
  ;; is displayed on top (happens near the bottom of windows)
  (setq company-tooltip-flip-when-above t)
  (global-company-mode)
  :bind(:map company-active-map
  ("C-n" . 'company-select-next)
  ("C-p" . 'company-select-previous)
  ("TAB" . 'company-complete-common-or-cycle)
  ("<tab>" . 'company-complete-common-or-cycle)))
#+END_SRC
* company-quickhelp
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  :config
  (company-quickhelp-mode)
  (setq company-quickhelp-delay 0))
#+END_SRC
* company-tern
#+BEGIN_SRC emacs-lisp
;(use-package company-tern
;  :ensure t
;  :init
;  (add-to-list 'company-backends 'company-tern)
;  :config
;  (setq company-tern-meta-as-single-line nil))
#+END_SRC
* company-tabnine
#+begin_src emacs-lisp
(use-package company-tabnine
  :ensure t
  :init
  (push 'company-tabnine company-backends)
  ;;(add-to-list 'company-backends #'company-tabnine)
  :config
  ;; Use the tab-and-go frontend.
  ;; Allows TAB to select and complete at the same time.
  ;;(company-tng-configure-default)
  ;;(setq company-frontends
  ;;      '(company-tng-frontend
  ;;        company-pseudo-tooltip-frontend
  ;;        company-echo-metadata-frontend))
)
#+end_src
* company-box
#+begin_src emacs-lisp
;;(use-package company-box
;;  :ensure t
;;  :hook (company-mode . company-box-mode))
#+end_src
* auto-complete
#+BEGIN_SRC emacs-lisp
;;(use-package auto-complete
;;  :ensure t
;;  :commands auto-complete-mode
;;  :init
;;  (progn
;;    (auto-complete-mode t))
;;  :bind
;;  (:map ac-menu-map
;;   ("C-n" . ac-next)
;;   ("C-p" . ac-previous))
;;  :config
;;  (setq ac-use-menu-map t)
;;  (setq ac-auto-show-menu 0)
;;  (setq ac-auto-start 1)
;;  (setq ac-fuzzy-enable t)
;;  (setq ac-quick-help-delay 0)
;;  (global-auto-complete-mode t))
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("M-g c" . avy-goto-char-timer)
         ("M-g g" . avy-goto-line)
         ("C-c C-k" . avy-kill-whole-line)))
#+END_SRC
* undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init(global-undo-tree-mode))
#+END_SRC
* treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
;  :init
;  (with-eval-after-load 'winum
;    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
;;  (dolist (item all-the-icons-icon-alist)
;;  (let* ((extension (car item))
;;         (icon (apply (cdr item))))
;;    (ht-set! treemacs-icons-hash
;;             (s-replace-all '(("\\" . "") ("$" . "") ("." . "")) extension)
;;             (concat icon " "))))

  (progn
    (setq treemacs-collapse-dirs                 (if (treemacs--find-python3) 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""          
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         30)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (treemacs-resize-icons 18)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC
* treemacs-projectile
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC
* treemacs-icon-dired
#+BEGIN_SRC emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+END_SRC
* treemacs-magit
#+BEGIN_SRC emacs-lisp
(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC
* beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1))
#+END_SRC
* symbol-overlay
#+BEGIN_SRC emacs-lisp
(use-package symbol-overlay
  :ensure t
  :bind (:map symbol-overlay-mode-map
  ("M-h" . symbol-overlay-put)
  ("M-n" . symbol-overlay-jump-next)
  ("M-p" . symbol-overlay-jump-prev))
  :hook (prog-mode . symbol-overlay-mode))
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))
#+END_SRC
* yasnippet-snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :ensure t)
#+END_SRC
* js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  (setq js-indent-level 2)
  (setq typescript-indent-level 2)
  (setq js2-strict-missing-semi-warning nil)
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
;;  :mode ("\\.js\\'" . js2-mode)
)
#+END_SRC
* indium
#+BEGIN_SRC emacs-lisp
(use-package indium
  :ensure t
  :config
  (setq indium-chrome-executable "google-chrome")
  (setq indium-chrome-use-temporary-profile nil))
#+END_SRC
* rjsx-mode
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t
  :mode ("\\.js\\'" . rjsx-mode))
#+END_SRC
* winum
#+BEGIN_SRC emacs-lisp
(use-package winum
  :ensure t
  :config
  ;;(setq winum-auto-setup-mode-line t)
  (winum-mode))
#+END_SRC
* wind-move
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+END_SRC
* elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :config
  (elpy-enable)
  (setq python-shell-interpreter "/home/lam/anaconda3/bin/ipython")
  (setq python-shell-interpreter-args "-i --simple-prompt"))
#+END_SRC
* ein
#+BEGIN_SRC emacs-lisp
(use-package ein
  :ensure t
  :config
  (setq request-backend 'url-retrieve))
#+END_SRC
* markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :config
  (setq markdown-command "/home/lam/anaconda3/bin/pandoc")
  :mode
  ("\\.md\\'" . markdown-mode))
#+END_SRC
* markdown-preview-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-preview-mode
  :ensure t)
#+END_SRC
* lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp)
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
(use-package company-lsp
  :ensure t
  :commands company-lsp
  :config
  (push 'company-lsp company-backends))
#+END_SRC
* helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :bind
  ("C-h f" . helpful-callable)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key))
#+END_SRC
* display-time
#+BEGIN_SRC emacs-lisp
(setq display-time-format "%Y-%m-%d %H:%M:%S")
(setq display-time-interval 1)
(setq display-time-default-load-average nil)
(display-time-mode)
#+END_SRC
* easy-hugo
#+BEGIN_SRC emacs-lisp
(use-package easy-hugo
  :ensure t
  :init
  (setq easy-hugo-basedir "~/Documents/blog/"))
#+END_SRC
* pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :mode (("\\.pdf\\'" . pdf-view-mode))
  :config
  (pdf-tools-install)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+end_src
* emacs-application-framework
#+begin_src emacs-lisp
;(use-package eaf
;  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
;  :custom
;  (eaf-find-alternate-file-in-dired t)
;  :config
;  (eaf-bind-key scroll_up "RET" eaf-pdf-viewer-keybinding)
;  (eaf-bind-key scroll_down_page "DEL" eaf-pdf-viewer-keybinding)
;  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
;  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
;  (setq eaf-proxy-type "socks5")
;  (setq eaf-proxy-host "127.0.0.1")
;  (setq eaf-proxy-port "1080")
;)
#+end_src
* move-text
#+begin_src emacs-lisp
(use-package move-text
  :ensure t
  :config
  (move-text-default-bindings))
#+end_src
* duplicate-line
#+begin_src emacs-lisp
(defun duplicate-line-or-region (&optional n)
      "Duplicate current line, or region if active.
    With argument N, make N copies.
    With negative N, comment out original line and use the absolute value."
      (interactive "*p")
      (let ((use-region (use-region-p)))
        (save-excursion
          (let ((text (if use-region        ;Get region if active, otherwise line
                          (buffer-substring (region-beginning) (region-end))
                        (prog1 (thing-at-point 'line)
                          (end-of-line)
                          (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                              (newline))))))
            (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
              (insert text))))
        (if use-region nil                  ;Only if we're working with a line (not a region)
          (let ((pos (- (point) (line-beginning-position)))) ;Save column
            (if (> 0 n)                             ;Comment out original with negative arg
                (comment-region (line-beginning-position) (line-end-position)))
            (forward-line 1)
            (forward-char pos)))))
(global-set-key (kbd "M-S-<down>") 'duplicate-line-or-region)
#+end_src
* etc
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-subword-mode 1)
  ;;(global-linum-mode t)
  (global-display-line-numbers-mode t)
  (global-hl-line-mode t)
  (global-auto-revert-mode t)
  (delete-selection-mode 1)
  (setq frame-title-format "%b")
  (treemacs)
  ;;(toggle-frame-maximized)
  (menu-bar-mode -1)
  ;;(desktop-save-mode t)
  ;;(electric-pair-mode t)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-splash-screen t)
  (setq make-backup-files nil)
  (setq er--show-expansion-message t)
  (setq create-lockfiles nil)
  (setq replace-lax-whitespace t)
#+END_SRC
